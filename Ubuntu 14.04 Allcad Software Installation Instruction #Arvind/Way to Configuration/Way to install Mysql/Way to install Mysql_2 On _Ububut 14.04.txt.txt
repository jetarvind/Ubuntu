Install MySQL on Ubuntu 14.04
https://www.linode.com/docs/databases/mysql/install-mysql-on-ubuntu-14-04


Before You Begin
Ensure that you have followed the Getting Started and Securing Your Server guides, and the Linode’s hostname is set.


To check your hostname run:
$ hostname
$ hostname -f

The first command should show your short hostname, and the second should show your fully qualified domain name (FQDN).
Update your system:

$ sudo apt-get update
$ sudo apt-get upgrade


Install MySQL

$ sudo apt-get install mysql-server

MySQL will bind to localhost (127.0.0.1) by default. Please reference our MySQL remote access guide for information on connecting to your databases using SSH.

Run the mysql_secure_installation script to address several security concerns in a default MySQL installation:

$ sudo mysql_secure_installation

You will be given the choice to change the MySQL root password, remove anonymous user accounts, disable root logins outside of localhost, and remove test databases. It is recommended that you answer yes to these options. You can read more about the script in the MySQL Reference Manual.



Use MySQL
The standard tool for interacting with MySQL is the mysql client, which installs with the mysql-server package. The MySQL client is accessed through a terminal.

Root Login
To log in to MySQL as the root user:



$ mysql -u root -p

When prompted, enter the root password you assigned when the mysql_secure_installation script was run.

You’ll then be presented with the MySQL monitor prompt:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 1
Server version: 5.0.45 Source distribution

Type 'help;' or '\h' for help. Type '\c' to clear the buffer.

mysql>

To generate a list of commands for the MySQL prompt, enter \h. You’ll then see:


List of all MySQL commands:
Note that all text commands must be first on line and end with ';'
?         (\?) Synonym for `help'.
clear     (\c) Clear command.
connect   (\r) Reconnect to the server. Optional arguments are db and host.
delimiter (\d) Set statement delimiter. NOTE: Takes the rest of the line as new delimiter.
edit      (\e) Edit command with $EDITOR.
ego       (\G) Send command to mysql server, display result vertically.
exit      (\q) Exit mysql. Same as quit.
go        (\g) Send command to mysql server.
help      (\h) Display this help.
nopager   (\n) Disable pager, print to stdout.
notee     (\t) Don't write into outfile.
pager     (\P) Set PAGER [to_pager]. Print the query results via PAGER.
print     (\p) Print current command.
prompt    (\R) Change your mysql prompt.
quit      (\q) Quit mysql.
rehash    (\#) Rebuild completion hash.
source    (\.) Execute an SQL script file. Takes a file name as an argument.
status    (\s) Get status information from the server.
system    (\!) Execute a system shell command.
tee       (\T) Set outfile [to_outfile]. Append everything into given outfile.
use       (\u) Use another database. Takes database name as argument.
charset   (\C) Switch to another charset. Might be needed for processing binlog with multi-byte charsets.
warnings  (\W) Show warnings after every statement.
nowarning (\w) Don't show warnings after every statement.

For server side help, type 'help contents'

mysql>




Create a New MySQL User and Database
In the example below, testdb is the name of the database, testuser is the user, and password is the user’s password.


mysql>
create database testdb;
create user 'testuser'@'localhost' identified by 'password';
grant all on testdb.* to 'testuser';
You can shorten this process by creating the user while assigning database permissions:


create database testdb;
grant all on testdb.* to 'testuser' identified by 'password';
Exit MySQL.

exit

You can shorten this process by creating the user while assigning database permissions:

create database testdb;
grant all on testdb.* to 'testuser' identified by 'password';

exit


Create a Sample Table


Log back in as testuser.


$ mysql -u testuser -p


Create a sample table called customers. This creates a table with a customer ID field of the type INT for integer (auto-incremented for new records, used as the primary key), as well as two fields for storing the customer’s name.



use testdb;
create table customers (customer_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, first_name TEXT, last_name TEXT);

$ exit


Reset the MySQL Root Password



$ sudo service mysql stop



Use dpkg to re-run the configuration process that MySQL goes through on first installation. You will again be asked to set a root password.


$ sudo dpkg-reconfigure mysql-server-5.5

Then start MySQL:


$ sudo service mysql start

You’ll now be able to log in again using 

$ mysql -u root -p.







